text
            org 0x000
            jmp Jugador1

            data
switches:   bss 1 ; 000
numpad:     bss 1 ; 001  
display1:   bss 1 ; 010
display2:   bss 1 ; 011
win1:       bss 1 ; 100
win2:       bss 1 ; 101
mov1:       bss 1 ; 110
mov2:       bss 1 ; 111
reset:      bss 1 ; 1000
score1:     byte 0
score2:     byte 0

            text
            org 0x010

Jugador1:   inp r1, switches ; Recibir movimientos de jugador 1
            add r2, r1, 0 ; Registro temporal de r1
            sub r2, r2, 1 ;
            bz Arriba1
            add r2, r1, 0
            sub r2, r2, 2 
            bz Abajo1
            add r2, r1, 0
            sub r2, r2, 4 
            bz Izquierda1
            add r2, r1, 0
            sub r2, r2, 8
            bz Derecha1
            jmp Nada1 ; Si ninguna se cumplió no moverse
Arriba1:    add r1, r2,  1
            out r1, mov1
            jmp Jugador2
Abajo1:     add r1, r2,  2
            out r1, mov1
            jmp Jugador2
Izquierda1: add r1, r2,  3
            out r1, mov1
            jmp Jugador2
Derecha1:   add r1, r2,  4
            out r1, mov1
            jmp Jugador2
Nada1:      out r0, mov1

Jugador2:   inp r1, numpad ; Recibir movimientos de jugador 1
            jsb delay
            add r2, r1, 0 ; Registro temporal de r1
            sub r2, r2, 2 ;
            bz Arriba2
            add r2, r1, 0
            sub r2, r2, 4
            bz Abajo2
            add r2, r1, 0
            sub r2, r2, 6
            bz Izquierda2
            add r2, r1, 0
            sub r2, r2, 8
            bz Derecha2
            jmp Nada2 ; Si ninguna se cumplió no moverse
Arriba2:    add r1, r2,  2
            out r1, mov2
            jmp WinCnt1
Abajo2:     add r1, r2,  5
            out r1, mov2
            jmp WinCnt1
Izquierda2: add r1, r2,  4
            out r1, mov2
            jmp WinCnt1
Derecha2:   add r1, r2,  6
            out r1, mov2
            jmp WinCnt1
Nada2:      out r0, mov2

WinCnt1:    inp r1, win1 ; Recibe win condition
            and r1, r1, 1
			bnz WinCnt2
            ldm r1, score1
            add r1, r1, 1
            stm r1, score1
            jmp Resetear

WinCnt2:    inp r1, win2 ; Recibe win condition
            and r1, r1, 1
			bnz Actualizar
            ldm r1, score2
            add r1, r1, 1
            stm r1, score2
            jmp Resetear

Actualizar: ldm r1, score1 ; Cargar puntuación de jugador 1
            out r1, display1 ; Mostrar puntuación
            ldm r1, score2 ; Cargar puntuación de jugador 2
            out r1, display2 ; Mostrar puntuación 
            jmp main

Resetear:   add r1, r0, 1
            out r1, reset
            jsb delay
            out r0, reset
            jmp main


delay:		add r7, r0, 0
again3:		add r6, r0, 0
again2:		add r5, r0, 0
again1:		add r5, r5, 1
			sub r0, r5, 0xFF
			bnz again1
			add r6, r6, 1
			sub r0, r6, 0xFF
			bnz again2
			add r7, r7, 1
			sub r0, r7, 0x0C
			bnz again3
			ret
