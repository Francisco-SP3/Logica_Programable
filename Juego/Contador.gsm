            text
            org 0x000
            jmp Jugador1

            data
switches:   bss 1
numpad:     bss 1
display1:   bss 1
display2:   bss 1
win1:       bss 1
win2:       bss 1
mov1:       bss 1
mov2:       bss 1
reset:      bss 1
zero:       byte 0
score1:     byte 0
score2:     byte 0

            text
            org 0x010

Jugador1:   inp r1, switches ; Recibir movimientos de jugador 1
            add r6, r1, 0 ; Registro temporal de r1
            sub r6, r6, 0x1 ;
            bz Arriba1
            add r6, r1, 0
            sub r6, r6, 0x2 
            bz Abajo1
            add r6, r1, 0
            sub r6, r6, 0x4 
            bz Izquierda1
            add r6, r1, 0
            sub r6, r6, 0x8
            bz Derecha1
            jmp Nada1 ; Si ninguna se cumplió, no moverse
Arriba1:    add r0, r6,  0x1
            out r0, mov1
            jmp Jugador2
Abajo1:     add r0, r6,  0x2
            out r0, mov1
            jmp Jugador2
Izquierda1: add r0, r6,  0x3
            out r0, mov1
            jmp Jugador2
Derecha1:   add r0, r6,  0x4
            out r0, mov1
            jmp Jugador2
Nada1:      ldm r0, zero
            out r0, mov1

Jugador2:   inp r2, numpad ; Recibir movimientos de jugador 2
            jsb delay
            add r7, r2, 0 ; Registro temporal de r2
            sub r7, r7, 0x2 
            bz Arriba2
            add r7, r2, 0
            sub r7, r7, 0x4 
            bz Izquierda2
            add r7, r2, 0
            sub r7, r7, 0x6 
            bz Derecha2
            add r7, r2, 0
            sub r7, r7, 0x8 
            bz Abajo2
            jmp Nada2;
Arriba2:    add r0, r7,  0x2
            out r0, mov2
            jmp WinCnt1
Abajo2:     add r0, r7,  0x5
            out r0, mov2
            jmp WinCnt1
Izquierda2: add r0, r7,  0x4
            out r0, mov2
            jmp WinCnt1
Derecha2:   add r0, r7,  0x6
            out r0, mov2
            jmp WinCnt1
Nada2:      ldm r0, zero
            out r0, mov2

WinCnt1:    inp r3, win1 ; Recibe win condition
            and r3, r3, 1
			bnz WinCnt2
            ldm r3, score1
            add r3, r3, 1
            stm r3, score1
            jmp Resetear

WinCnt2:    inp r4, win2 ; Recibe win condition
            and r4, r4, 1
			bnz Actualizar
            ldm r4, score2
            add r4, r4, 1
            stm r4, score2
            jmp Resetear

Actualizar: ldm r0, score1 ; Cargar puntuación de jugador 1
            out r0, display1 ; Mostrar puntuación
            ldm r0, score2 ; Cargar puntuación de jugador 2
            out r0, display2 ; Mostrar puntuación 
            jmp Jugador1

Resetear:   ldm r0, zero
            add r0, r0, 1
            out r0, reset
            jsb delay
            sub r0, r0, 1
            out r0, reset
            jmp Jugador1


delay:		add r7, r0, 0
again3:		add r6, r0, 0
again2:		add r5, r0, 0
again1:		add r5, r5, 1
			sub r0, r5, 0xFF
			bnz again1
			add r6, r6, 1
			sub r0, r6, 0xFF
			bnz again2
			add r7, r7, 1
			sub r0, r7, 0x0C
			bnz again3
			ret 
